name: Tests

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

env:
  PYTHON_VERSION: "3.13.5"

jobs:
  # Run all linting, formatting, and static analysis checks via pre-commit
  lint-and-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    runs-on: ubuntu-latest
    name: Linting and Formatting
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4 # Updated to v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - uses: astral-sh/ruff-action@v3
      - run: ruff check --fix
      - run: ruff format


      - name: Bandit Scan
        uses: shundor/python-bandit-scan@ab1d87dfccc5a0ffab88be3aaac6ffe35c10d6cd
        with: # optional arguments
          # exit with 0, even with results found
          exit_zero: true # optional, default is DEFAULT
          # Github token of the repository (automatically created by Github)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information.
          # File or directory to run bandit on
          # path: # optional, default is .
          # Report only issues of a given severity level or higher. Can be LOW, MEDIUM or HIGH. Default is UNDEFINED (everything)
          # level: # optional, default is UNDEFINED
          # Report only issues of a given confidence level or higher. Can be LOW, MEDIUM or HIGH. Default is UNDEFINED (everything)
          # confidence: # optional, default is UNDEFINED
          # comma-separated list of paths (glob patterns supported) to exclude from scan (note that these are in addition to the excluded paths provided in the config file) (default: .svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.eggs,*.egg)
          # excluded_paths: # optional, default is DEFAULT
          # comma-separated list of test IDs to skip
          # skips: # optional, default is DEFAULT
          # path to a .bandit file that supplies command line arguments
          # ini_path: # optional, default is DEFAULT

  # # Run tests with pytest - TEMPORARILY DISABLED
  # pytest:
  #   runs-on: ubuntu-latest
  #   name: Run tests
  #   strategy:
  #     matrix:
  #       python-version: ["3.11", "3.12"]
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #
  #     - name: Install Poetry
  #       uses: snok/install-poetry@v1
  #       with:
  #         version: latest
  #         virtualenvs-create: true
  #         virtualenvs-in-project: true
  #
  #     - name: Load cached venv
  #       id: cached-poetry-dependencies
  #       uses: actions/cache@v4 # Updated to v4
  #       with:
  #         path: .venv
  #         key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
  #
  #     - name: Install dependencies
  #       if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
  #       run: poetry install --no-interaction --no-root
  #
  #     - name: Run pytest
  #       run: |
  #         poetry run pytest \
  #           --cov=custom_components.meraki_dashboard \
  #           --cov-report=xml \
  #           --cov-report=term-missing:skip-covered
  #
  #     - name: Upload coverage to Codecov
  #       if: matrix.python-version == '3.11'
  #       uses: codecov/codecov-action@v4 # Updated to v4
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         files: ./coverage.xml
  #         flags: unittests
  #         name: codecov-umbrella

  # Check with Home Assistant's hassfest
  hassfest:
    runs-on: ubuntu-latest
    name: Hassfest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Run hassfest
        uses: home-assistant/actions/hassfest@master

  # Validate HACS compliance
  hacs:
    runs-on: ubuntu-latest
    name: HACS
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: HACS validation
        uses: hacs/action@main
        with:
          category: integration
          ignore: brands

  # Check for security vulnerabilities in dependencies
  safety:
    runs-on: ubuntu-latest
    name: Dependency Security
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4 # Updated to v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}

      - name: Upload Safety report
        uses: actions/upload-artifact@v4
        if: failure() # Only upload on failure to avoid clutter
        with:
          name: safety-report
          path: safety-report.json

  # All checks must pass
  all-checks-pass:
    runs-on: ubuntu-latest
    name: All Checks Pass
    if: success() # Only run this job if all dependencies succeed
    needs:
      - lint-and-scan
      # - pytest # Re-enable when you re-enable the pytest job
      - hassfest
      - hacs
      - safety
    steps:
      - name: All checks passed
        run: echo "âœ… All checks passed!"