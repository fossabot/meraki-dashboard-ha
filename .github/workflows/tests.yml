name: Tests

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.13"

jobs:
  # Run all linting, formatting, and static analysis checks via pre-commit
  lint-and-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    runs-on: ubuntu-latest
    name: Linting and Formatting
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Run Ruff linting
        run: poetry run ruff check --fix custom_components tests

      - name: Run Ruff formatting
        run: poetry run ruff format custom_components tests

  # Check with Home Assistant's hassfest
  hassfest:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    name: Hassfest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Run hassfest
        uses: home-assistant/actions/hassfest@master

  # Validate HACS compliance
  hacs:
    runs-on: ubuntu-latest
    name: HACS
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: HACS validation
        uses: hacs/action@main
        with:
          category: integration

  # Test the integration
  pytest:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    name: Run Tests
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Run tests with coverage
        run: |
          poetry run python -m pytest tests/ \
            --cov=custom_components.meraki_dashboard \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=10 \
            -v

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # All checks must pass
  all-checks-pass:
    runs-on: ubuntu-latest
    name: All Checks Pass
    if: success() # Only run this job if all dependencies succeed
    needs:
      - lint-and-scan
      - pytest
      - hassfest
      - hacs
    steps:
      - name: All checks passed
        run: echo "âœ… All checks passed!"
