[project]
name = "meraki-dashboard-ha"
version = "0.1.0"
description = "Meraki Dashboard integration for Home Assistant"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.13.2,<3.14"
keywords = ["homeassistant", "meraki", "cisco", "iot", "sensors"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.13",
    "Topic :: Home Automation",
]
dependencies = [
    "meraki>=2.0.3,<3.0.0",
]

[project.urls]
Homepage = "https://github.com/YOUR_GITHUB_USERNAME/meraki-dashboard-ha"
Documentation = "https://github.com/YOUR_GITHUB_USERNAME/meraki-dashboard-ha"
Repository = "https://github.com/YOUR_GITHUB_USERNAME/meraki-dashboard-ha"
"Bug Tracker" = "https://github.com/YOUR_GITHUB_USERNAME/meraki-dashboard-ha/issues"

[tool.poetry]
package-mode = false

[tool.poetry.group.dev.dependencies]
homeassistant = ">=2024.1.0"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-homeassistant-custom-component = "^0.13.0"
black = "*"
isort = "*"
flake8 = "*"
flake8-docstrings = "*"
flake8-comprehensions = "*"
mypy = "*"
pylint = "*"
pre-commit = "^4.2.0"
bandit = "*"
types-requests = "*"
types-PyYAML = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

[tool.isort]
profile = "black"
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
multi_line_output = 3
include_trailing_comma = true
skip_gitignore = true
known_first_party = ["custom_components.meraki_dashboard", "tests"]
known_third_party = ["meraki", "homeassistant", "pytest"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.11"
ignore_missing_imports = true
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
strict_optional = true
show_error_codes = true

# Home Assistant specific configurations
[[tool.mypy.overrides]]
module = "homeassistant.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "meraki.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "custom_components.meraki_dashboard.*"
warn_return_any = false
warn_unreachable = false

[tool.pylint.main]
py-version = "3.11"
ignore = ["tests"]
jobs = 0
persistent = true
fail-under = 8.0

[tool.pylint.messages_control]
max-line-length = 88
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0613",  # Unused argument
    "W0707",  # Consider explicitly re-raising
    "too-many-instance-attributes",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "too-many-arguments",
    "too-few-public-methods",
    "duplicate-code",
]
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "T"]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.similarities]
min-similarity-lines = 7
ignore-comments = true
ignore-docstrings = true
ignore-imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
norecursedirs = [".git", ".tox", "dist", "build", "*.egg", "venv"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=custom_components.meraki_dashboard",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-vv",
    "-s",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
]

[tool.coverage.run]
source = ["custom_components.meraki_dashboard"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
targets = ["custom_components"]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "D",   # pydocstyle
    "N",  # pep8-naming
    "Q",  # flake8-quotes
]
ignore = [
    "E501",  # line too long
    "D202",  # no blank lines after function docstring
    "D203",  # one blank line before class
    "D213",  # multi-line docstring summary should start at the second line
    "C901",  # too complex (we'll allow some complexity for now)
]

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D100", "D101", "D102", "D103", "D104"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces.
indent-style = "space"