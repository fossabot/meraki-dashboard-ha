---
description:
globs:
alwaysApply: true
---

# Common Patterns

## Hub-Based Architecture Pattern

### Creating New Hubs
1. Extend appropriate base hub class (`MerakiOrganizationHub` or `MerakiNetworkHub`)
2. Implement required abstract methods for device type
3. Add hub configuration to `config/hub_config.py`
4. Register hub in organization hub factory
5. Add hub tests using `HubBuilder` from test builders

### Hub Interaction Pattern
```python
# Organization hub creates network hubs
org_hub = MerakiOrganizationHub(hass, api_key, org_id, entry)
network_hubs = await org_hub.async_create_network_hubs()

# Network hub handles device-specific operations
network_hub = network_hubs["network_id_device_type"]
data = await network_hub.async_get_sensor_data()
```

## Entity Factory Pattern

### Adding New Entity Types
1. Add entity constant to `const.py` (using `EntityType` enum)
2. Add entity description to appropriate device file in `devices/` folder
3. Update entity factory in `entities/factory.py`
4. Add icon mapping to `icons.json`
5. Test with `SensorDataBuilder` and `MerakiDeviceBuilder`

### Entity Creation Pattern
```python
# Factory creates entities based on device capabilities
entity_factory = MerakiEntityFactory(hass, device_info)
entities = entity_factory.create_entities_for_device(device_data)
```

## Device Abstraction Pattern

### Device Class Structure
- Base device functionality in `devices/__init__.py`
- Device-specific implementations:
  - `devices/mt.py` - Environmental sensors
  - `devices/mr.py` - Wireless access points
  - `devices/ms.py` - Switches
  - `devices/organization.py` - Organization-level metrics

### Adding New Device Types
1. Create device class in `devices/` folder
2. Implement device-specific data transformers
3. Add device type to `DeviceType` enum in `const.py`
4. Update hub factory to handle new device type
5. Add device builder to test builders

## Configuration Management Pattern

### Configuration Schema Pattern
```python
# Type-safe configuration validation
from .config.schemas import MerakiConfigSchema

config = MerakiConfigSchema.from_config_entry(entry.data, entry.options)
```

### Configuration Migration Pattern
```python
# Handle configuration version changes
from .config.migration import async_migrate_config_entry

await async_migrate_config_entry(hass, entry)
```

## Data Transformation Pattern

### API Response Processing
```python
# Use transformers for API data processing
from .data.transformers import MerakiDataTransformer

transformer = MerakiDataTransformer()
entities = transformer.transform_device_data(api_response)
```

### Data Normalization
- Use transformers to normalize data across device types
- Handle missing or invalid API responses
- Convert units and format states appropriately
- Map API values to Home Assistant entity states

## Service Architecture Pattern

### Service Implementation
```python
# Service for cross-cutting concerns
from .services.event_service import MerakiEventService

event_service = MerakiEventService(hass)
await event_service.track_sensor_changes(device_serial, readings, device_info)
```

### Service Registration
- Register services in main integration setup
- Use dependency injection for service configuration
- Make services easily testable and mockable

## Performance Monitoring Pattern

### Performance Decorators
```python
from .utils.performance import performance_monitor

@performance_monitor("operation_name")
async def my_operation():
    # Your code here
```

### Performance Tracking
- Track API call latency and error rates
- Monitor coordinator performance
- Log performance metrics periodically
- Use performance data for optimization

## Error Handling Pattern

### Error Handling Decorators
```python
from .utils.error_handling import handle_api_errors
from .utils.retry import with_standard_retries

@handle_api_errors(reraise_on=(UpdateFailed,))
@with_standard_retries("realtime")
async def api_operation():
    # Your code here
```

### Error Categorization
- Use custom exception hierarchy
- Handle different error types appropriately
- Implement circuit breaker for repeated failures
- Log errors with proper context

## Testing Patterns

### Builder Pattern for Tests
```python
from tests.builders import MerakiDeviceBuilder, SensorDataBuilder, HubBuilder

# Create test device
device = MerakiDeviceBuilder().as_mt_device().build()

# Create test sensor data
readings = SensorDataBuilder().as_temperature(22.5).build()

# Create test hub
hub = await HubBuilder().build_network_hub(hass, "network_id", "MT")
```

### Integration Testing Pattern
```python
from tests.builders import IntegrationTestHelper

helper = IntegrationTestHelper(hass)
await helper.setup_meraki_integration(devices=[device1, device2])
```

## Development Workflow

### Adding New Features
1. Create or update device classes in `devices/`
2. Add data transformers in `data/transformers.py`
3. Update entity factory in `entities/factory.py`
4. Add entity descriptions and icons
5. Write comprehensive tests using builder patterns
6. Add performance monitoring and error handling
7. Update documentation

### Testing Strategy
1. Use builder patterns for test data creation
2. Mock external API calls appropriately
3. Test both success and failure scenarios
4. Use integration helpers for full flow testing
5. Run tests with `poetry run pytest`
6. Check coverage with `poetry run pytest --cov`

## Utilities Pattern

### Utility Organization
- `utils/performance.py` - Performance monitoring decorators
- `utils/error_handling.py` - Error handling decorators and utilities
- `utils/retry.py` - Retry logic and backoff strategies
- `utils/device_info.py` - Device registry helpers

### Utility Usage
```python
# Import utilities as needed
from .utils.performance import performance_monitor
from .utils.error_handling import handle_api_errors
from .utils.retry import with_standard_retries
```

## Documentation Pattern
1. Documentation lives in `docs/` folder (GitHub Pages)
2. Use clear, descriptive docstrings with type information
3. Document architectural decisions and patterns
4. Provide examples for common use cases
5. Keep documentation up-to-date with code changes
6. Prefer updating existing documentation over creating new files
7. Do not put any documentation into the repository root only into docs/ folder
