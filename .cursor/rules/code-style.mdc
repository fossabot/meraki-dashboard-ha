---
description:
globs:
alwaysApply: true
---

# Code Style Guidelines

## Python Standards
- Follow PEP 8 with 88-char line length (Black formatter)
- Use type hints for all function parameters and return values
- Use Google-style docstrings with type information
- Use async/await for all I/O operations
- Early returns to reduce nesting
- Descriptive variable names (no single letters except in comprehensions)
- Use f-strings for string formatting
- Use StrEnum for constants and configuration keys for type safety
- Import TYPE_CHECKING for type-only imports to avoid circular imports

## Home Assistant Conventions
- Follow Home Assistant integration patterns and conventions
- Use Home Assistant's built-in helpers and utilities
- Implement proper error handling with ConfigEntryAuthFailed and ConfigEntryNotReady
- Use update coordinators for efficient data fetching
- Create devices for physical hardware, entities for individual metrics
- Use device_registry and entity_registry for device and entity management
- Implement proper entity unique IDs and device identifiers

## Architecture Patterns

### Hub-Based Design
- Create hub classes for organization and network-level operations
- Hubs should be responsible for API interactions and data management
- Use dependency injection pattern for hub configuration
- Implement hub factory patterns for dynamic creation
- Separate concerns between organization and network hubs

### Entity Management
- Use entity factory pattern for creating entities based on device capabilities
- Implement base entity classes for common functionality
- Create entities dynamically based on available device metrics
- Use proper entity categorization and device classes

### Service Architecture
- Implement services for cross-cutting concerns (events, monitoring, etc.)
- Use dependency injection for service configuration
- Keep services focused on single responsibilities
- Make services easily testable and mockable

### Configuration Management
- Use configuration schemas for type-safe validation
- Implement migration system for configuration changes
- Support hub-specific configuration overrides
- Validate configuration at startup and runtime

## File Organization
- Keep related functionality together
- Use clear, descriptive file and function names
- Group imports logically (standard library, third-party, local)
- Maintain consistent indentation and spacing
- Organize modules by architectural layer:
  - `hubs/` - Hub implementations
  - `devices/` - Device-specific logic
  - `entities/` - Entity management
  - `config/` - Configuration handling
  - `data/` - Data processing
  - `services/` - Service layer
  - `utils/` - Utility functions

## Error Handling & Performance
- Use custom exception hierarchy for different error types
- Implement performance monitoring decorators
- Use retry logic with exponential backoff
- Implement comprehensive logging with appropriate levels
- Handle API errors gracefully with proper user feedback

## Testing Patterns
- Use builder pattern for test data creation
- Create test fixtures for common scenarios
- Use integration test helpers for full flow testing
- Mock external dependencies appropriately
- Test both success and failure scenarios
- Use descriptive test names that explain the scenario

## Utility Functions
- Create utility functions for common operations
- Use decorators for cross-cutting concerns (performance, retry, error handling)
- Implement proper type safety in utility functions
- Keep utilities focused and single-purpose

## Data Transformation
- Use transformer classes for converting API data to Home Assistant entities
- Implement proper unit conversions and state mapping
- Handle missing or invalid data gracefully
- Use type-safe data structures for transformed data

## Logging Best Practices
- Use appropriate log levels (DEBUG, INFO, WARNING, ERROR)
- Suppress third-party library verbose logging
- Include performance metrics in debug logs
- Use structured logging with consistent formatting
- Never log sensitive information (API keys, tokens)
- Include exc_info=True in error logs for stack traces
